import json
from payroll.utils.general.general import Queries, ParseValues, EvaluateQueryResults
from payroll.utils.general.automations import ShiftGenerateAutomations
from payroll.models.core import (EmployeeShifts, EmployeeShiftsGenerated, Employee)


class ShiftGenerateSimulate:
    def __init__(self, requests):
        self.request = requests
        self.body = json.loads(requests.body)

    def execute(self):
        try:
            company_id = self.request.COOKIES['company_id']
            header = self.body['data']

            shift_generated = ShiftGenerateAutomations(
                date_from=header['date_from'],
                date_to=header['date_to'],
                company_id=company_id
            ).execute()

            return shift_generated

        except KeyError as key_err:
            return {"KeyError": str(key_err)}
        except Exception as ex:
            return {"error": str(ex)}


class ShiftReGenerateSimulate:
    def __init__(self, requests):
        self.request = requests
        self.body = json.loads(requests.body)

    def execute(self):
        try:
            company_id = self.request.COOKIES['company_id']
            header = self.body['data']

            shift_generated = ShiftGenerateAutomations(
                id=header['id'],
                company_id=company_id
            ).re_execute()

            return shift_generated

        except KeyError as key_err:
            return {"KeyError": str(key_err)}
        except Exception as ex:
            return {"error": str(ex)}


class ShiftGenerateSave:
    def __init__(self, requests):
        self.request = requests
        self.body = json.loads(requests.body)

    def execute_generate(self):
        try:
            company_id = self.request.COOKIES['company_id']
            shift_generated_header = self.body['header']
            shift_generated_lines = self.body['lines']

            # print(shift_generated_header)
            date = ParseValues(
                [shift_generated_header['date_from'], shift_generated_header['date_to']]
            ).parse_date_from_string()
            header_values = {
                'company_id': company_id,
                'date_from': date[0],
                'date_to': date[1]
            }
            head_result = Queries(EmployeeShiftsGenerated).execute_create(header_values)
            for line in shift_generated_lines:
                line_datetime = ParseValues(
                    [line['datetime_from'], line['datetime_to']]
                ).parse_datetime_from_string_no_sec()
                employee_obj = Employee(id=line['employee_id'])
                generate_shift_obj = head_result[1]

                line_values = {
                    'employee_id': employee_obj,
                    'generate_shift': generate_shift_obj,
                    'datetime_from': line_datetime[0],
                    'datetime_to': line_datetime[1],
                    'is_autogenerated': True,
                    # 'created_by': ''
                }

                Queries(EmployeeShifts).execute_create(line_values)

            return head_result[0]['status']

        except KeyError as key_err:
            return {"KeyError": str(key_err)}
        except Exception as ex:
            return {"error": str(ex)}

    def execute_regenerate(self):
        try:
            shift_generated_header_sid = self.body['header']['id']
            shift_generated_lines = self.body['lines']
            result = []

            for line in shift_generated_lines:
                line_datetime = ParseValues(
                    [line['datetime_from'], line['datetime_to']]
                ).parse_datetime_from_string_no_sec()
                employee_obj = Employee(id=line['employee_id'])
                generate_shift_obj = EmployeeShiftsGenerated(id=shift_generated_header_sid)

                line_values = {
                    'employee_id': employee_obj,
                    'generate_shift': generate_shift_obj,
                    'datetime_from': line_datetime[0],
                    'datetime_to': line_datetime[1],
                    'is_autogenerated': True,
                    # 'created_by': ''
                }

                result.append(Queries(EmployeeShifts).execute_create(line_values))

            return EvaluateQueryResults(result).execute_query_results()

        except KeyError as key_err:
            return {"KeyError": str(key_err)}
        except Exception as ex:
            return {"error": str(ex)}


class ExistingShiftGenerate:
    def __init__(self, requests):
        self.request = requests
        self.body = json.loads(requests.body)

    def execute_generate(self):
        try:
            company_id = self.request.COOKIES['company_id']
            shift_generated_dates = self.body['header']
            shift_generated_lines = self.body['lines']
            shift_generated_schedules = self.body['schedule']
            shift_generated_employees = self.body['ids']

            shift_generated = ShiftGenerateAutomations(
                employees=shift_generated_employees,
                date_from=shift_generated_dates['date_from'],
                date_to=shift_generated_dates['date_to'],
                company_id=company_id,
                lines=shift_generated_lines,
                schedules=shift_generated_schedules
            ).execute_rebuild_existing_shifts()

            self._save_update_delete_shifts_generated(shift_generated)
        except KeyError as key_err:
            return {"KeyError": str(key_err)}
        except Exception as ex:
            return {"error": str(ex)}

    def execute_remove_shifts(self):
        try:
            shift_generated_lines = self.body['lines']
            if len(shift_generated_lines) > 0:
                for delete in shift_generated_lines:
                    if delete["id"] is not None:
                        print(Queries(EmployeeShifts).execute_unrestricted_delete(delete["id"]))

        except KeyError as key_err:
            print(str(key_err))
            return {"KeyError": str(key_err)}
        except Exception as ex:
            print(str(ex))
            return {"error": str(ex)}

    @staticmethod
    def _save_update_delete_shifts_generated(shifts):
        try:
            for shift in shifts:
                for create in shift["create"]:
                    employee_obj = Employee(id=create["employee_id"])
                    datetime_from = (ParseValues([create["datetime_from"], create["datetime_to"]]).
                                     parse_datetime_from_string_no_sec())
                    line_values = {
                        'employee_id': employee_obj,
                        'datetime_from': datetime_from[0],
                        'datetime_to': datetime_from[1],
                        'is_autogenerated': True,
                        # 'created_by': ''
                    }

                    print(Queries(EmployeeShifts).execute_create(line_values))

                for update in shift["update"]:
                    datetime_from = (ParseValues([update["datetime_from"], update["datetime_to"]]).
                                     parse_datetime_from_string_no_sec())
                    line_values = {
                        'employee_id': update["employee_id"],
                        'datetime_from': datetime_from[0],
                        'datetime_to': datetime_from[1],
                        'is_autogenerated': True,
                        # 'created_by': ''
                    }

                    if update["id"] is not None:
                        print(Queries(EmployeeShifts).execute_change(line_values, update["id"]))

                for delete in shift["delete"]:
                    if delete["id"] is not None:
                        print(Queries(EmployeeShifts).execute_unrestricted_delete(delete["id"]))

        except KeyError as key_err:
            print(str(key_err))
            return {"KeyError": str(key_err)}
        except Exception as ex:
            print(str(ex))
            return {"error": str(ex)}
